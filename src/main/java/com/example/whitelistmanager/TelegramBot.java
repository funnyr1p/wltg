package com.example.whitelistmanager;

import org.bukkit.Bukkit;
import org.bukkit.OfflinePlayer;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class TelegramBot extends TelegramLongPollingBot {
    private final String botToken;
    private final WhitelistManager plugin;
    private final Map<Long, String> pendingRequests; // chatId -> playerName
    private final Map<String, Long> playerChatIds; // playerName -> chatId
    private final String adminChatId;

    public TelegramBot(String botToken, String adminChatId, WhitelistManager plugin) {
        this.botToken = botToken;
        this.adminChatId = adminChatId;
        this.plugin = plugin;
        this.pendingRequests = new HashMap<>();
        this.playerChatIds = new HashMap<>();
    }

    @Override
    public String getBotUsername() {
        return "WhitelistManagerBot";
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—à–ª–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if (chatId != Long.parseLong(adminChatId)) {
                if (messageText.startsWith("/start")) {
                    sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–π—Ç–ª–∏—Å—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–∞ Minecraft.\n" +
                            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /request <–Ω–∏–∫> –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç.");
                } else if (messageText.startsWith("/request")) {
                    handleRequest(chatId, messageText);
                }
                return;
            }

            // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if (messageText.startsWith("/online")) {
                handleOnlineCommand(chatId);
            } else if (messageText.startsWith("/list")) {
                handleListCommand(chatId);
            } else if (messageText.startsWith("/del ")) {
                handleDelCommand(chatId, messageText);
            } else if (messageText.startsWith("/add ")) {
                handleAddCommand(chatId, messageText);
            } else if (messageText.startsWith("/start")) {
                sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–π—Ç–ª–∏—Å—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–∞ Minecraft.\n" +
                        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                        "/online - —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤\n" +
                        "/list - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ\n" +
                        "/add <–Ω–∏–∫> - –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç\n" +
                        "/del <–Ω–∏–∫> - —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞");
            }
        } else if (update.hasCallbackQuery()) {
            String callbackData = update.getCallbackQuery().getData();
            long chatId = update.getCallbackQuery().getMessage().getChatId();
            String playerName = pendingRequests.get(chatId);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏—à–µ–ª –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if (chatId == Long.parseLong(adminChatId) && playerName != null) {
                if (callbackData.equals("accept")) {
                    handleAccept(playerName, chatId);
                } else if (callbackData.equals("deny")) {
                    handleDeny(playerName, chatId);
                }
                pendingRequests.remove(chatId);
            }
        }
    }

    private void handleOnlineCommand(long chatId) {
        Bukkit.getScheduler().runTask(plugin, () -> {
            List<String> onlinePlayers = Bukkit.getOnlinePlayers().stream()
                    .map(player -> "‚Ä¢ " + player.getName())
                    .collect(Collectors.toList());

            if (onlinePlayers.isEmpty()) {
                sendMessage(chatId, "üîÑ –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤.");
            } else {
                String message = "üîÑ –û–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–∏ (" + onlinePlayers.size() + "):\n" +
                        String.join("\n", onlinePlayers);
                sendMessage(chatId, message);
            }
        });
    }

    private void handleListCommand(long chatId) {
        Bukkit.getScheduler().runTask(plugin, () -> {
            List<String> whitelistedPlayers = Bukkit.getWhitelistedPlayers().stream()
                    .map(player -> "‚Ä¢ " + player.getName())
                    .collect(Collectors.toList());

            if (whitelistedPlayers.isEmpty()) {
                sendMessage(chatId, "üìã –í–∞–π—Ç–ª–∏—Å—Ç –ø—É—Å—Ç.");
            } else {
                String message = "üìã –ò–≥—Ä–æ–∫–∏ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ (" + whitelistedPlayers.size() + "):\n" +
                        String.join("\n", whitelistedPlayers);
                sendMessage(chatId, message);
            }
        });
    }

    private void handleDelCommand(long chatId, String messageText) {
        String[] parts = messageText.split(" ", 2);
        if (parts.length < 2) {
            sendMessage(chatId, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /del <–Ω–∏–∫>");
            return;
        }

        String playerName = parts[1];
        Bukkit.getScheduler().runTask(plugin, () -> {
            OfflinePlayer player = Bukkit.getOfflinePlayer(playerName);
            if (player.isWhitelisted()) {
                player.setWhitelisted(false);
                sendMessage(chatId, "‚úÖ –ò–≥—Ä–æ–∫ " + playerName + " —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞.");
            } else {
                sendMessage(chatId, "‚ùå –ò–≥—Ä–æ–∫ " + playerName + " –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ.");
            }
        });
    }

    private void handleAddCommand(long chatId, String messageText) {
        String[] parts = messageText.split(" ", 2);
        if (parts.length < 2) {
            sendMessage(chatId, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add <–Ω–∏–∫>");
            return;
        }

        String playerName = parts[1];
        Bukkit.getScheduler().runTask(plugin, () -> {
            OfflinePlayer player = Bukkit.getOfflinePlayer(playerName);
            if (!player.isWhitelisted()) {
                Bukkit.getServer().setWhitelist(true);
                player.setWhitelisted(true);
                sendMessage(chatId, "‚úÖ –ò–≥—Ä–æ–∫ " + playerName + " –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞–π—Ç–ª–∏—Å—Ç.");
            } else {
                sendMessage(chatId, "‚ùå –ò–≥—Ä–æ–∫ " + playerName + " —É–∂–µ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ.");
            }
        });
    }

    private void handleRequest(long chatId, String messageText) {
        String[] parts = messageText.split(" ", 2);
        if (parts.length < 2) {
            sendMessage(chatId, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /request <–Ω–∏–∫>");
            return;
        }

        String playerName = parts[1];
        OfflinePlayer player = Bukkit.getOfflinePlayer(playerName);
        
        pendingRequests.put(Long.parseLong(adminChatId), playerName);
        playerChatIds.put(playerName, chatId);
        sendRequestToAdmins(playerName);
        sendMessage(chatId, "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.");
    }

    private void sendRequestToAdmins(String playerName) {
        SendMessage message = new SendMessage();
        message.setChatId(adminChatId);
        message.setText("üîÑ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç:\n–ò–≥—Ä–æ–∫: " + playerName);

        InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
        List<InlineKeyboardButton> rowInline = new ArrayList<>();

        InlineKeyboardButton acceptButton = new InlineKeyboardButton();
        acceptButton.setText("‚úÖ –ü—Ä–∏–Ω—è—Ç—å");
        acceptButton.setCallbackData("accept");

        InlineKeyboardButton denyButton = new InlineKeyboardButton();
        denyButton.setText("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å");
        denyButton.setCallbackData("deny");

        rowInline.add(acceptButton);
        rowInline.add(denyButton);
        rowsInline.add(rowInline);
        markupInline.setKeyboard(rowsInline);
        message.setReplyMarkup(markupInline);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void handleAccept(String playerName, long chatId) {
        Bukkit.getScheduler().runTask(plugin, () -> {
            OfflinePlayer player = Bukkit.getOfflinePlayer(playerName);
            Bukkit.getServer().setWhitelist(true);
            player.setWhitelisted(true);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            sendMessage(chatId, "‚úÖ –ò–≥—Ä–æ–∫ " + playerName + " –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞–π—Ç–ª–∏—Å—Ç!");
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É –≤ Telegram
            Long playerChatId = playerChatIds.get(playerName);
            if (playerChatId != null) {
                sendMessage(playerChatId, "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç –±—ã–ª –ø—Ä–∏–Ω—è—Ç!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–π—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.");
                playerChatIds.remove(playerName);
            }
        });
    }

    private void handleDeny(String playerName, long chatId) {
        Bukkit.getScheduler().runTask(plugin, () -> {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            sendMessage(chatId, "‚ùå –ó–∞–ø—Ä–æ—Å –∏–≥—Ä–æ–∫–∞ " + playerName + " –æ—Ç–∫–ª–æ–Ω–µ–Ω.");
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É –≤ Telegram
            Long playerChatId = playerChatIds.get(playerName);
            if (playerChatId != null) {
                sendMessage(playerChatId, "‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω.");
                playerChatIds.remove(playerName);
            }
        });
    }

    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
} 